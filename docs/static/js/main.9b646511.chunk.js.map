{"version":3,"sources":["components/Screen.tsx","lib/input.ts","components/ActionButtons.tsx","components/CrossPad.tsx","routes/Full.tsx","routes/Screen.tsx","components/Connection.tsx","lib/state.ts","routes/Choice.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SCREEN_WIDTH","SCREEN_HEIGHT","Screen","Key","props","canvas","useRef","useEffect","ws","onmessage","e","current","data","Blob","type","img","document","createElement","url","window","URL","webkitURL","createObjectURL","ctx","getContext","onload","drawImage","src","fillStyle","fillRect","Container","ScreenBorders","width","height","ref","styled","div","ActionButtonsPanel","ButtonKind","handler","event","up","send","console","log","touchHandler","preventDefault","Button","kind","a","onUp","A","onDown","onTouchDown","onTouchUp","b","B","BUTTON_DIAMETER","BUTTON_MARGIN","ButtonContainer","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","PAD_BRANCH_WIDTH","PAD_BRANCH_LENGTH","CrossPad","mouseHandler","VerticalBranch","isTop","down","HorizontalBranch","isLeft","left","right","CenterNode","Pad","Branch","Full","screenWs","ControlContainer","inputWs","ActionButtons","Connection","State","useState","text","setText","openWebSocket","ip","socket","WebSocket","binaryType","onopen","onerror","onclose","value","onChange","target","onClick","onConnection","handleConnection","Choice","full","choose","App","choice","state","setState","setScreenWs","setInputWs","component","sws","iws","nextState","screen","className","Body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9b646511.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\n\nconst SCREEN_WIDTH = 240;\nconst SCREEN_HEIGHT = 160;\nconst SCREEN_BORDER = 32;\n\ninterface IScreen {\n  ws: WebSocket | null;\n}\n\nfunction Screen(props: IScreen) {\n  const canvas = useRef<null | HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (props.ws) {\n      props.ws.onmessage = (e) => {\n        if (canvas && canvas.current) {\n          const data = new Blob([e.data], { type: \"image/jpeg\" });\n          const img = document.createElement(\"img\");\n          const urlCreator = window.URL || window.webkitURL;\n          const url = urlCreator.createObjectURL(data);\n          const ctx = canvas.current.getContext(\"2d\");\n          img.onload = () => {\n            ctx?.drawImage(img, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\n          };\n          img.src = url;\n        }\n      };\n    } else if (canvas.current) {\n      const ctx = canvas.current.getContext(\"2d\");\n      if (ctx) {\n        ctx.fillStyle = \"#c8cad5\";\n        ctx.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\n      }\n    }\n  }, [canvas, props.ws]);\n\n  return (\n    <Container>\n      <ScreenBorders>\n        <canvas width={SCREEN_WIDTH} height={SCREEN_HEIGHT} ref={canvas} />\n      </ScreenBorders>\n    </Container>\n  );\n}\n\nexport default Screen;\n\nconst Container = styled.div``;\n\nconst ScreenBorders = styled.div`\n  max-width: ${SCREEN_WIDTH + SCREEN_BORDER}px;\n  min-width: ${SCREEN_WIDTH + SCREEN_BORDER}px;\n  max-height: ${SCREEN_HEIGHT + SCREEN_BORDER}px;\n  min-height: ${SCREEN_HEIGHT + SCREEN_BORDER}px;\n  background-color: #1c1c24;\n  border-radius: 10px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DisplayPlaceholder = styled.div`\n  max-width: ${SCREEN_WIDTH}px;\n  min-width: ${SCREEN_WIDTH}px;\n  max-height: ${SCREEN_HEIGHT}px;\n  min-height: ${SCREEN_HEIGHT}px;\n  background-color: #c8cad5;\n`;\n","export enum Key {\n    A = 0,\n    B = 1,\n    select = 2,\n    start = 3,\n    right = 4,\n    left = 5,\n    up = 6,\n    down = 7,\n    R = 8,\n    L = 9,\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Key } from \"../lib/input\";\n\nexport default ActionButtonsPanel;\n\nconst BUTTON_DIAMETER = 40;\nconst BUTTON_MARGIN = 24;\nconst PANEL_WIDTH = 2 * BUTTON_MARGIN + 2 * BUTTON_DIAMETER;\nconst PANEL_HEIGHT = 2 * BUTTON_MARGIN + 2 * BUTTON_DIAMETER;\n\nenum ButtonKind {\n  a = \"A\",\n  b = \"B\",\n}\n\ninterface IActionButtons {\n  ws: WebSocket | null;\n}\n\nfunction ActionButtonsPanel(props: IActionButtons) {\n  const handler = (event: Key, up: boolean) => () => {\n    if (props.ws) {\n      if (up) {\n        props.ws.send(`0${event}`);\n      } else {\n        props.ws.send(`1${event}`);\n      }\n    } else {\n      console.log(\"Connection closed: can't send event\");\n    }\n  };\n\n  const touchHandler = (event: Key, up: boolean) => (e: React.TouchEvent) => {\n    e.preventDefault();\n    if (props.ws) {\n      if (up) {\n        props.ws.send(`0${event}`);\n      } else {\n        props.ws.send(`1${event}`);\n      }\n    } else {\n      console.log(\"Connection closed: can't send event\");\n    }\n  };\n\n  return (\n    <Container>\n      <Button\n        kind={ButtonKind.a}\n        onUp={handler(Key.A, true)}\n        onDown={handler(Key.A, false)}\n        onTouchDown={touchHandler(Key.A, true)}\n        onTouchUp={touchHandler(Key.A, false)}\n      />\n      <Button\n        kind={ButtonKind.b}\n        onUp={handler(Key.B, true)}\n        onDown={handler(Key.B, false)}\n        onTouchDown={touchHandler(Key.B, true)}\n        onTouchUp={touchHandler(Key.B, false)}\n      />\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  height: ${PANEL_HEIGHT}px;\n  width: ${PANEL_WIDTH}px;\n  position: relative;\n`;\n\ninterface IButtonProps {\n  kind: ButtonKind;\n  onUp: () => void;\n  onDown: () => void;\n  onTouchUp: (e: React.TouchEvent) => void;\n  onTouchDown: (e: React.TouchEvent) => void;\n}\n\nfunction Button(props: IButtonProps) {\n  return (\n    <ButtonContainer\n      kind={props.kind}\n      onMouseDown={props.onDown}\n      onMouseUp={props.onUp}\n      onTouchStart={props.onTouchDown}\n      onTouchEnd={props.onTouchUp}\n    >\n      <span>{props.kind}</span>\n    </ButtonContainer>\n  );\n}\n\nconst ButtonContainer = styled.div<{ kind: ButtonKind }>`\n  background-color: #c8cad5;\n  height: ${BUTTON_DIAMETER}px;\n  width: ${BUTTON_DIAMETER}px;\n  border-radius: ${BUTTON_DIAMETER}px;\n  border: 0;\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  top: ${(props) =>\n    props.kind === ButtonKind.a\n      ? `${BUTTON_MARGIN}px`\n      : `${BUTTON_MARGIN + BUTTON_DIAMETER}px`};\n  left: ${(props) =>\n    props.kind === ButtonKind.a\n      ? `${BUTTON_MARGIN + BUTTON_DIAMETER}px`\n      : `${BUTTON_MARGIN}px`};\n\n  span {\n    margin: auto;\n  }\n\n  :active {\n    filter: brightness(85%);\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Key } from \"../lib/input\";\n\nconst PAD_BRANCH_WIDTH = 32;\nconst PAD_BRANCH_LENGTH = 48;\nconst PAD_RADIUS = 8;\n\ninterface ICrossPad {\n  ws: WebSocket | null;\n}\n\nfunction CrossPad(props: ICrossPad) {\n  const mouseHandler = (event: Key, up: boolean) => () => {\n    if (props.ws) {\n      if (up) {\n        props.ws.send(`0${event}`);\n      } else {\n        props.ws.send(`1${event}`);\n      }\n    } else {\n      console.log(\"Connection closed: can't send event\");\n    }\n  };\n\n  const touchHandler = (event: Key, up: boolean) => (e: React.TouchEvent) => {\n    e.preventDefault();\n    if (props.ws) {\n      if (up) {\n        props.ws.send(`0${event}`);\n      } else {\n        props.ws.send(`1${event}`);\n      }\n    } else {\n      console.log(\"Connection closed: can't send event\");\n    }\n  };\n\n  return (\n    <Container>\n      <VerticalBranch\n        isTop={true}\n        onMouseUp={mouseHandler(Key.up, true)}\n        onMouseDown={mouseHandler(Key.up, false)}\n        onTouchStart={touchHandler(Key.up, false)}\n        onTouchEnd={touchHandler(Key.up, true)}\n      />\n      <VerticalBranch\n        isTop={false}\n        onMouseUp={mouseHandler(Key.down, true)}\n        onMouseDown={mouseHandler(Key.down, false)}\n        onTouchStart={touchHandler(Key.down, false)}\n        onTouchEnd={touchHandler(Key.down, true)}\n      />\n      <HorizontalBranch\n        isLeft={true}\n        onMouseUp={mouseHandler(Key.left, true)}\n        onMouseDown={mouseHandler(Key.left, false)}\n        onTouchStart={touchHandler(Key.left, false)}\n        onTouchEnd={touchHandler(Key.left, true)}\n      />\n      <HorizontalBranch\n        isLeft={false}\n        onMouseUp={mouseHandler(Key.right, true)}\n        onMouseDown={mouseHandler(Key.right, false)}\n        onTouchStart={touchHandler(Key.right, false)}\n        onTouchEnd={touchHandler(Key.right, true)}\n      />\n      <CenterNode />\n    </Container>\n  );\n}\n\nexport default CrossPad;\n\nconst Container = styled.div`\n  height: ${2 * PAD_BRANCH_LENGTH + PAD_BRANCH_WIDTH}px;\n  width: ${2 * PAD_BRANCH_LENGTH + PAD_BRANCH_WIDTH}px;\n  position: relative;\n`;\n\nconst Pad = styled.div`\n  background-color: #c8cad5;\n`;\n\nconst CenterNode = styled(Pad)`\n  height: ${PAD_BRANCH_WIDTH}px;\n  width: ${PAD_BRANCH_WIDTH}px;\n  position: absolute;\n  top: ${PAD_BRANCH_LENGTH}px;\n  left: ${PAD_BRANCH_LENGTH}px;\n`;\n\nconst Branch = styled(Pad)`\n  :active {\n    filter: brightness(85%);\n  }\n`;\n\nconst VerticalBranch = styled(Branch)<{ isTop: boolean }>`\n  height: ${PAD_BRANCH_LENGTH}px;\n  width: ${PAD_BRANCH_WIDTH}px;\n  position: absolute;\n  ${(props) =>\n    props.isTop\n      ? `\n      top: O;\n      border-radius: ${PAD_RADIUS}px ${PAD_RADIUS}px 0 0;\n      `\n      : `\n      bottom: 0;\n      border-radius: 0 0 ${PAD_RADIUS}px ${PAD_RADIUS}px;\n      `}\n  left: ${PAD_BRANCH_LENGTH}px;\n`;\n\nconst HorizontalBranch = styled(Branch)<{ isLeft: boolean }>`\n  height: ${PAD_BRANCH_WIDTH}px;\n  width: ${PAD_BRANCH_LENGTH}px;\n  position: absolute;\n  ${(props) =>\n    props.isLeft\n      ? `\n        left: O;\n        border-radius:  ${PAD_RADIUS}px 0 0 ${PAD_RADIUS}px;\n        `\n      : `\n      right: 0;\n      border-radius: 0 ${PAD_RADIUS}px ${PAD_RADIUS}px 0;\n      `}\n  top: ${PAD_BRANCH_LENGTH}px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Screen from \"../components/Screen\";\nimport ActionButtonsPanel from \"../components/ActionButtons\";\nimport CrossPad from \"../components/CrossPad\";\n\ninterface IFull {\n  screenWs: null | WebSocket;\n  inputWs: null | WebSocket;\n}\n\nfunction Full(props: IFull) {\n  return (\n    <Container>\n      <Screen ws={props.screenWs} />\n      <ControlContainer>\n        <CrossPad ws={props.inputWs} />\n        <ActionButtonsPanel ws={props.inputWs} />\n      </ControlContainer>\n    </Container>\n  );\n}\n\nexport default Full;\n\nconst Container = styled.div`\n  min-height: 100vh;\n  max-height: 100vh;\n  min-width: 100vw;\n  max-width: 100vw;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ControlContainer = styled.div`\n  margin-top: 20px;\n  display: flex;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport ScreenComponent from \"../components/Screen\";\n\nfunction Screen() {\n  return (\n    <Container>\n      <ScreenComponent ws={null} />\n    </Container>\n  );\n}\n\nexport default Screen;\n\nconst Container = styled.div`\n  min-height: 100vh;\n  max-height: 100vh;\n  min-width: 100vw;\n  max-width: 100vw;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\ninterface IConnection {\n  onConnection: (screenWs: WebSocket | null, inputWs: WebSocket | null) => void;\n  type: \"screen\" | \"input\" | \"both\";\n}\n\nfunction Connection(props: IConnection) {\n  const [text, setText] = useState(\"206.189.62.12:8100\");\n\n  const openWebSocket = (ip: string, type: \"screen\" | \"input\") => {\n    const socket = new WebSocket(`ws://${ip}`);\n    socket.binaryType = \"arraybuffer\";\n    socket.onopen = () => {\n      console.log(\"Conn open\");\n      socket.send(type);\n    };\n    socket.onerror = (e) => {\n      console.log(e);\n    };\n    socket.onclose = () => {\n      console.log(\"Conn closed\");\n    };\n    return socket;\n  };\n\n  const handleConnection = (ip: string) => {\n    let screenWs = null;\n    let inputWs = null;\n    if (props.type === \"screen\" || props.type === \"both\") {\n      screenWs = openWebSocket(ip, \"screen\");\n    }\n    if (props.type === \"input\" || props.type === \"both\") {\n      inputWs = openWebSocket(ip, \"input\");\n    }\n    props.onConnection(screenWs, inputWs);\n  };\n\n  return (\n    <Container>\n      <input\n        type=\"text\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button onClick={() => handleConnection(text)}>Connect</button>\n    </Container>\n  );\n}\n\nexport default Connection;\n\nconst Container = styled.div`\n  margin: 32px;\n`;\n","export enum State {\n    choice,\n    full,\n    screen,\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport Connection from \"../components/Connection\";\nimport { State } from \"../lib/state\";\n\ninterface IChoice {\n  choose: (\n    screenWs: WebSocket | null,\n    inputWs: WebSocket | null,\n    state: State\n  ) => void;\n}\n\nfunction Choice(props: IChoice) {\n  const [choise, setChoice] = useState(State.full);\n  return (\n    <Container>\n      <Connection\n        onConnection={(screenWs, inputWs) =>\n          props.choose(screenWs, inputWs, State.full)\n        }\n        type=\"both\"\n      />\n    </Container>\n  );\n}\n\nexport default Choice;\n\nconst Container = styled.div`\n  min-height: 100vh;\n  max-height: 100vh;\n  min-width: 100vw;\n  max-width: 100vw;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ControlContainer = styled.div`\n  margin-top: 20px;\n  display: flex;\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport Full from \"./routes/Full\";\nimport Screen from \"./routes/Screen\";\nimport Choice from \"./routes/Choice\";\nimport { State } from \"./lib/state\";\n\nfunction App() {\n  const [state, setState] = useState(State.choice);\n  const [screenWs, setScreenWs] = useState<null | WebSocket>(null);\n  const [inputWs, setInputWs] = useState<null | WebSocket>(null);\n\n  const choose = (\n    sws: null | WebSocket,\n    iws: null | WebSocket,\n    nextState: State\n  ) => {\n    setScreenWs(sws);\n    setInputWs(iws);\n    setState(nextState);\n  };\n\n  let component = null;\n  switch (state) {\n    case State.choice:\n      component = <Choice choose={choose} />;\n      break;\n    case State.screen:\n      component = <Screen />;\n      break;\n    case State.full:\n      component = <Full inputWs={inputWs} screenWs={screenWs} />;\n      break;\n  }\n  return (\n    <div className=\"App\">\n      <Body>{component}</Body>\n    </div>\n  );\n}\n\nexport default App;\n\nconst Body = styled.div`\n  min-height: 100vh;\n  max-height: 100vh;\n  min-width: 100vw;\n  max-width: 100vw;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  background-color: #675ea7;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}