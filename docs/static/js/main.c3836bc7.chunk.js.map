{"version":3,"sources":["components/Screen.tsx","lib/input.ts","components/ActionButtons.tsx","components/CrossPad.tsx","components/Connection.tsx","routes/Full.tsx","routes/Screen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SCREEN_WIDTH","SCREEN_HEIGHT","Screen","Key","props","canvas","useRef","useEffect","ws","onmessage","e","current","data","Blob","type","img","document","createElement","url","window","URL","webkitURL","createObjectURL","ctx","getContext","onload","drawImage","src","fillStyle","fillRect","Container","ScreenBorders","width","height","ref","styled","div","ActionButtonsPanel","ButtonKind","handler","event","up","send","Button","kind","a","onUp","A","onDown","b","B","BUTTON_DIAMETER","BUTTON_MARGIN","ButtonContainer","onMouseDown","onMouseUp","button","PAD_BRANCH_WIDTH","PAD_BRANCH_LENGTH","CrossPad","VerticalBranch","isTop","down","HorizontalBranch","isLeft","left","right","CenterNode","Pad","Branch","Connection","useState","text","setText","value","onChange","target","onClick","ip","socket","WebSocket","binaryType","onopen","console","log","onerror","onclose","onConnection","handleConnection","Full","screenWs","setScreenWs","inputWs","setInputWs","ControlContainer","ActionButtons","PREFIX","App","className","Body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c3836bc7.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\n\nconst SCREEN_WIDTH = 240;\nconst SCREEN_HEIGHT = 160;\nconst SCREEN_BORDER = 32;\n\ninterface IScreen {\n  ws: WebSocket | null;\n}\n\nfunction Screen(props: IScreen) {\n  const canvas = useRef<null | HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (props.ws) {\n      props.ws.onmessage = (e) => {\n        if (canvas && canvas.current) {\n          const data = new Blob([e.data], { type: \"image/jpeg\" });\n          const img = document.createElement(\"img\");\n          const urlCreator = window.URL || window.webkitURL;\n          const url = urlCreator.createObjectURL(data);\n          const ctx = canvas.current.getContext(\"2d\");\n          img.onload = () => {\n            ctx?.drawImage(img, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\n          };\n          img.src = url;\n        }\n      };\n    } else if (canvas.current) {\n      const ctx = canvas.current.getContext(\"2d\");\n      if (ctx) {\n        ctx.fillStyle = \"#c8cad5\";\n        ctx.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\n      }\n    }\n  }, [canvas, props.ws]);\n\n  return (\n    <Container>\n      <ScreenBorders>\n        <canvas width={SCREEN_WIDTH} height={SCREEN_HEIGHT} ref={canvas} />\n      </ScreenBorders>\n    </Container>\n  );\n}\n\nexport default Screen;\n\nconst Container = styled.div``;\n\nconst ScreenBorders = styled.div`\n  max-width: ${SCREEN_WIDTH + SCREEN_BORDER}px;\n  min-width: ${SCREEN_WIDTH + SCREEN_BORDER}px;\n  max-height: ${SCREEN_HEIGHT + SCREEN_BORDER}px;\n  min-height: ${SCREEN_HEIGHT + SCREEN_BORDER}px;\n  background-color: #1c1c24;\n  border-radius: 10px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DisplayPlaceholder = styled.div`\n  max-width: ${SCREEN_WIDTH}px;\n  min-width: ${SCREEN_WIDTH}px;\n  max-height: ${SCREEN_HEIGHT}px;\n  min-height: ${SCREEN_HEIGHT}px;\n  background-color: #c8cad5;\n`;\n","export enum Key {\n    A = 0,\n    B = 1,\n    select = 2,\n    start = 3,\n    right = 4,\n    left = 5,\n    up = 6,\n    down = 7,\n    R = 8,\n    L = 9,\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Key } from \"../lib/input\";\n\nexport default ActionButtonsPanel;\n\nconst BUTTON_DIAMETER = 40;\nconst BUTTON_MARGIN = 24;\nconst PANEL_WIDTH = 2 * BUTTON_MARGIN + 2 * BUTTON_DIAMETER;\nconst PANEL_HEIGHT = 2 * BUTTON_MARGIN + 2 * BUTTON_DIAMETER;\n\nenum ButtonKind {\n  a = \"A\",\n  b = \"B\",\n}\n\ninterface IActionButtons {\n  ws: WebSocket | null;\n}\n\nfunction ActionButtonsPanel(props: IActionButtons) {\n  const handler = (event: Key, up: boolean) => () => {\n    if (props.ws) {\n      if (up) {\n        props.ws.send(`0${event}`);\n      } else {\n        props.ws.send(`1${event}`);\n      }\n    }\n  };\n\n  return (\n    <Container>\n      <Button\n        kind={ButtonKind.a}\n        onUp={handler(Key.A, true)}\n        onDown={handler(Key.A, false)}\n      />\n      <Button\n        kind={ButtonKind.b}\n        onUp={handler(Key.B, true)}\n        onDown={handler(Key.B, false)}\n      />\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  height: ${PANEL_HEIGHT}px;\n  width: ${PANEL_WIDTH}px;\n  position: relative;\n`;\n\ninterface IButtonProps {\n  kind: ButtonKind;\n  onUp: () => void;\n  onDown: () => void;\n}\n\nfunction Button(props: IButtonProps) {\n  return (\n    <ButtonContainer\n      kind={props.kind}\n      onMouseDown={props.onDown}\n      onMouseUp={props.onUp}\n    >\n      <span>{props.kind}</span>\n    </ButtonContainer>\n  );\n}\n\nconst ButtonContainer = styled.button<{ kind: ButtonKind }>`\n  background-color: #c8cad5;\n  height: ${BUTTON_DIAMETER}px;\n  width: ${BUTTON_DIAMETER}px;\n  border-radius: ${BUTTON_DIAMETER}px;\n  border: 0;\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  top: ${(props) =>\n    props.kind === ButtonKind.a\n      ? `${BUTTON_MARGIN}px`\n      : `${BUTTON_MARGIN + BUTTON_DIAMETER}px`};\n  left: ${(props) =>\n    props.kind === ButtonKind.a\n      ? `${BUTTON_MARGIN + BUTTON_DIAMETER}px`\n      : `${BUTTON_MARGIN}px`};\n\n  span {\n    margin: auto;\n  }\n\n  :active {\n    filter: brightness(85%);\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Key } from \"../lib/input\";\n\nconst PAD_BRANCH_WIDTH = 32;\nconst PAD_BRANCH_LENGTH = 48;\nconst PAD_RADIUS = 8;\n\ninterface ICrossPad {\n  ws: WebSocket | null;\n}\n\nfunction CrossPad(props: ICrossPad) {\n  const handler = (event: Key, up: boolean) => () => {\n    if (props.ws) {\n      if (up) {\n        props.ws.send(`0${event}`);\n      } else {\n        props.ws.send(`1${event}`);\n      }\n    }\n  };\n\n  return (\n    <Container>\n      <VerticalBranch\n        isTop={true}\n        onMouseUp={handler(Key.up, true)}\n        onMouseDown={handler(Key.up, false)}\n      />\n      <VerticalBranch\n        isTop={false}\n        onMouseUp={handler(Key.down, true)}\n        onMouseDown={handler(Key.down, false)}\n      />\n      <HorizontalBranch\n        isLeft={true}\n        onMouseUp={handler(Key.left, true)}\n        onMouseDown={handler(Key.left, false)}\n      />\n      <HorizontalBranch\n        isLeft={false}\n        onMouseUp={handler(Key.right, true)}\n        onMouseDown={handler(Key.right, false)}\n      />\n      <CenterNode />\n    </Container>\n  );\n}\n\nexport default CrossPad;\n\nconst Container = styled.div`\n  height: ${2 * PAD_BRANCH_LENGTH + PAD_BRANCH_WIDTH}px;\n  width: ${2 * PAD_BRANCH_LENGTH + PAD_BRANCH_WIDTH}px;\n  position: relative;\n`;\n\nconst Pad = styled.div`\n  background-color: #c8cad5;\n`;\n\nconst CenterNode = styled(Pad)`\n  height: ${PAD_BRANCH_WIDTH}px;\n  width: ${PAD_BRANCH_WIDTH}px;\n  position: absolute;\n  top: ${PAD_BRANCH_LENGTH}px;\n  left: ${PAD_BRANCH_LENGTH}px;\n`;\n\nconst Branch = styled(Pad)`\n  :active {\n    filter: brightness(85%);\n  }\n`;\n\nconst VerticalBranch = styled(Branch)<{ isTop: boolean }>`\n  height: ${PAD_BRANCH_LENGTH}px;\n  width: ${PAD_BRANCH_WIDTH}px;\n  position: absolute;\n  ${(props) =>\n    props.isTop\n      ? `\n      top: O;\n      border-radius: ${PAD_RADIUS}px ${PAD_RADIUS}px 0 0;\n      `\n      : `\n      bottom: 0;\n      border-radius: 0 0 ${PAD_RADIUS}px ${PAD_RADIUS}px;\n      `}\n  left: ${PAD_BRANCH_LENGTH}px;\n`;\n\nconst HorizontalBranch = styled(Branch)<{ isLeft: boolean }>`\n  height: ${PAD_BRANCH_WIDTH}px;\n  width: ${PAD_BRANCH_LENGTH}px;\n  position: absolute;\n  ${(props) =>\n    props.isLeft\n      ? `\n        left: O;\n        border-radius:  ${PAD_RADIUS}px 0 0 ${PAD_RADIUS}px;\n        `\n      : `\n      right: 0;\n      border-radius: 0 ${PAD_RADIUS}px ${PAD_RADIUS}px 0;\n      `}\n  top: ${PAD_BRANCH_LENGTH}px;\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\ninterface IConnection {\n  onConnection: (ws: WebSocket) => void;\n  type: \"screen\" | \"input\";\n}\n\nfunction Connection(props: IConnection) {\n  const [text, setText] = useState(\"127.0.0.1:8100\");\n\n  const handleConnection = (ip: string) => {\n    const socket = new WebSocket(`ws://${ip}`);\n    socket.binaryType = \"arraybuffer\";\n    socket.onopen = () => {\n      console.log(\"Conn open\");\n      socket.send(props.type);\n    };\n    socket.onerror = (e) => {\n      console.log(e);\n    };\n    socket.onclose = () => {\n      console.log(\"Conn closed\");\n    };\n    props.onConnection(socket);\n  };\n\n  return (\n    <Container>\n      <input\n        type=\"text\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n      />\n      <button onClick={() => handleConnection(text)}>Connect</button>\n    </Container>\n  );\n}\n\nexport default Connection;\n\nconst Container = styled.div`\n  margin: 32px;\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport Screen from \"../components/Screen\";\nimport ActionButtonsPanel from \"../components/ActionButtons\";\nimport CrossPad from \"../components/CrossPad\";\nimport Connection from \"../components/Connection\";\n\nfunction Full() {\n  const [screenWs, setScreenWs] = useState<null | WebSocket>(null);\n  const [inputWs, setInputWs] = useState<null | WebSocket>(null);\n\n  return (\n    <Container>\n      <Connection onConnection={(ws) => setScreenWs(ws)} type=\"screen\" />\n      <Connection onConnection={(ws) => setInputWs(ws)} type=\"input\" />\n      <Screen ws={screenWs} />\n      <ControlContainer>\n        <CrossPad ws={inputWs} />\n        <ActionButtonsPanel ws={inputWs} />\n      </ControlContainer>\n    </Container>\n  );\n}\n\nexport default Full;\n\nconst Container = styled.div`\n  min-height: 100vh;\n  max-height: 100vh;\n  min-width: 100vw;\n  max-width: 100vw;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ControlContainer = styled.div`\n  margin-top: 20px;\n  display: flex;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport ScreenComponent from \"../components/Screen\";\n\nfunction Screen() {\n  return (\n    <Container>\n      <ScreenComponent ws={null} />\n    </Container>\n  );\n}\n\nexport default Screen;\n\nconst Container = styled.div`\n  min-height: 100vh;\n  max-height: 100vh;\n  min-width: 100vw;\n  max-width: 100vw;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Full from \"./routes/Full\";\nimport Screen from \"./routes/Screen\";\n\nconst PREFIX = \"cloud-gba\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Body>\n        <Router>\n          <Switch>\n            <Route path=\"/full\">\n              <Full />\n            </Route>\n            <Route path={`${PREFIX}/full`}>\n              <Full />\n            </Route>\n            <Route path=\"/screen\">\n              <Screen />\n            </Route>\n            <Route path={`${PREFIX}/screen`}>\n              <Screen />\n            </Route>\n            <Route path=\"/\">\n              <Full />\n            </Route>\n          </Switch>\n        </Router>\n      </Body>\n    </div>\n  );\n}\n\nexport default App;\n\nconst Body = styled.div`\n  min-height: 100vh;\n  max-height: 100vh;\n  min-width: 100vw;\n  max-width: 100vw;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  background-color: #675ea7;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}