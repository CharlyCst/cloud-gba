{"version":3,"sources":["components/Screen.tsx","components/ActionButtons.tsx","components/CrossPad.tsx","routes/Full.tsx","routes/Screen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SCREEN_WIDTH","SCREEN_HEIGHT","Screen","canvas","useRef","draw","a","current","ctx","getContext","Math","random","fillStyle","fillRect","setTimeout","useEffect","Container","ScreenBorders","width","height","ref","DisplayPlaceholder","styled","div","ActionButtonsPanel","ButtonKind","props","Button","kind","onClick","console","log","b","BUTTON_DIAMETER","BUTTON_MARGIN","ButtonContainer","button","PAD_BRANCH_WIDTH","PAD_BRANCH_LENGTH","CrossPad","VerticalBranch","isTop","HorizontalBranch","isLeft","CenterNode","Pad","Branch","Full","ControlContainer","ActionButtons","App","className","Body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1599dcaa.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\n\nconst SCREEN_WIDTH = 240;\nconst SCREEN_HEIGHT = 160;\nconst SCREEN_BORDER = 32;\n\nfunction Screen() {\n  const canvas = useRef<null | HTMLCanvasElement>(null);\n\n  const draw = async () => {\n    if (canvas.current === null) return;\n\n    const ctx = canvas.current.getContext(\"2d\");\n    if (ctx === null) return;\n    if (Math.random() > 0.5) {\n      ctx.fillStyle = \"#6b6b8c\";\n    } else {\n      ctx.fillStyle = \"#c8cad5\";\n    }\n\n    ctx.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\n    setTimeout(draw, 200);\n  };\n\n  useEffect(() => {\n    draw();\n  }, [canvas, draw]);\n\n  return (\n    <Container>\n      <ScreenBorders>\n        {canvas ? (\n          <canvas width={SCREEN_WIDTH} height={SCREEN_HEIGHT} ref={canvas} />\n        ) : (\n          <>\n            <canvas width={0} height={0} ref={canvas} />\n            <DisplayPlaceholder />\n          </>\n        )}\n      </ScreenBorders>\n    </Container>\n  );\n}\n\nexport default Screen;\n\nconst Container = styled.div``;\n\nconst ScreenBorders = styled.div`\n  max-width: ${SCREEN_WIDTH + SCREEN_BORDER}px;\n  min-width: ${SCREEN_WIDTH + SCREEN_BORDER}px;\n  max-height: ${SCREEN_HEIGHT + SCREEN_BORDER}px;\n  min-height: ${SCREEN_HEIGHT + SCREEN_BORDER}px;\n  background-color: #1c1c24;\n  border-radius: 10px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst DisplayPlaceholder = styled.div`\n  max-width: ${SCREEN_WIDTH}px;\n  min-width: ${SCREEN_WIDTH}px;\n  max-height: ${SCREEN_HEIGHT}px;\n  min-height: ${SCREEN_HEIGHT}px;\n  background-color: #c8cad5;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport default ActionButtonsPanel;\n\nconst BUTTON_DIAMETER = 40;\nconst BUTTON_MARGIN = 24;\nconst PANEL_WIDTH = 2 * BUTTON_MARGIN + 2 * BUTTON_DIAMETER;\nconst PANEL_HEIGHT = 2 * BUTTON_MARGIN + 2 * BUTTON_DIAMETER;\n\nenum ButtonKind {\n  a = \"A\",\n  b = \"B\",\n}\n\ninterface IActionButtons {}\n\nfunction ActionButtonsPanel(props: IActionButtons) {\n  return (\n    <Container>\n      <Button kind={ButtonKind.a} onClick={() => console.log(\"A\")} />\n      <Button kind={ButtonKind.b} onClick={() => console.log(\"B\")} />\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  height: ${PANEL_HEIGHT}px;\n  width: ${PANEL_WIDTH}px;\n  position: relative;\n`;\n\ninterface IButtonProps {\n  kind: ButtonKind;\n  onClick: () => void;\n}\n\nfunction Button(props: IButtonProps) {\n  return (\n    <ButtonContainer kind={props.kind} onClick={props.onClick}>\n      <span>{props.kind}</span>\n    </ButtonContainer>\n  );\n}\n\nconst ButtonContainer = styled.button<{ kind: ButtonKind }>`\n  background-color: #c8cad5;\n  height: ${BUTTON_DIAMETER}px;\n  width: ${BUTTON_DIAMETER}px;\n  border-radius: ${BUTTON_DIAMETER}px;\n  border: 0;\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  top: ${(props) =>\n    props.kind === ButtonKind.a\n      ? `${BUTTON_MARGIN}px`\n      : `${BUTTON_MARGIN + BUTTON_DIAMETER}px`};\n  left: ${(props) =>\n    props.kind === ButtonKind.a\n      ? `${BUTTON_MARGIN + BUTTON_DIAMETER}px`\n      : `${BUTTON_MARGIN}px`};\n\n  span {\n    margin: auto;\n  }\n\n  :active {\n    filter: brightness(85%);\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst PAD_BRANCH_WIDTH = 32;\nconst PAD_BRANCH_LENGTH = 48;\nconst PAD_RADIUS = 8;\n\ninterface ICrossPad {}\n\nfunction CrossPad(props: ICrossPad) {\n  return (\n    <Container>\n      <VerticalBranch isTop={true} onClick={() => console.log(\"top\")} />\n      <VerticalBranch isTop={false} onClick={() => console.log(\"bottom\")} />\n      <HorizontalBranch isLeft={true} onClick={() => console.log(\"left\")} />\n      <HorizontalBranch isLeft={false} onClick={() => console.log(\"right\")} />\n      <CenterNode />\n    </Container>\n  );\n}\n\nexport default CrossPad;\n\nconst Container = styled.div`\n  height: ${2 * PAD_BRANCH_LENGTH + PAD_BRANCH_WIDTH}px;\n  width: ${2 * PAD_BRANCH_LENGTH + PAD_BRANCH_WIDTH}px;\n  position: relative;\n`;\n\nconst Pad = styled.div`\n  background-color: #c8cad5;\n`;\n\nconst CenterNode = styled(Pad)`\n  height: ${PAD_BRANCH_WIDTH}px;\n  width: ${PAD_BRANCH_WIDTH}px;\n  position: absolute;\n  top: ${PAD_BRANCH_LENGTH}px;\n  left: ${PAD_BRANCH_LENGTH}px;\n`;\n\nconst Branch = styled(Pad)`\n  :active {\n    filter: brightness(85%);\n  }\n`;\n\nconst VerticalBranch = styled(Branch)<{ isTop: boolean }>`\n  height: ${PAD_BRANCH_LENGTH}px;\n  width: ${PAD_BRANCH_WIDTH}px;\n  position: absolute;\n  ${(props) =>\n    props.isTop\n      ? `\n      top: O;\n      border-radius: ${PAD_RADIUS}px ${PAD_RADIUS}px 0 0;\n      `\n      : `\n      bottom: 0;\n      border-radius: 0 0 ${PAD_RADIUS}px ${PAD_RADIUS}px;\n      `}\n  left: ${PAD_BRANCH_LENGTH}px;\n`;\n\nconst HorizontalBranch = styled(Branch)<{ isLeft: boolean }>`\n  height: ${PAD_BRANCH_WIDTH}px;\n  width: ${PAD_BRANCH_LENGTH}px;\n  position: absolute;\n  ${(props) =>\n    props.isLeft\n      ? `\n        left: O;\n        border-radius:  ${PAD_RADIUS}px 0 0 ${PAD_RADIUS}px;\n        `\n      : `\n      right: 0;\n      border-radius: 0 ${PAD_RADIUS}px ${PAD_RADIUS}px 0;\n      `}\n  top: ${PAD_BRANCH_LENGTH}px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Screen from \"../components/Screen\";\nimport ActionButtonsPanel from \"../components/ActionButtons\";\nimport CrossPad from \"../components/CrossPad\";\n\nfunction Full() {\n  return (\n    <Container>\n      <Screen />\n      <ControlContainer>\n        <CrossPad />\n        <ActionButtonsPanel />\n      </ControlContainer>\n    </Container>\n  );\n}\n\nexport default Full;\n\nconst Container = styled.div`\n  min-height: 100vh;\n  max-height: 100vh;\n  min-width: 100vw;\n  max-width: 100vw;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ControlContainer = styled.div`\n  margin-top: 20px;\n  display: flex;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport ScreenComponent from \"../components/Screen\";\n\nfunction Screen() {\n  return (\n    <Container>\n      <ScreenComponent />\n    </Container>\n  );\n}\n\nexport default Screen;\n\nconst Container = styled.div`\n  min-height: 100vh;\n  max-height: 100vh;\n  min-width: 100vw;\n  max-width: 100vw;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Full from \"./routes/Full\";\nimport Screen from \"./routes/Screen\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Body>\n        <Router>\n          <Switch>\n            <Route path=\"/full\">\n              <Full />\n            </Route>\n            <Route path=\"/screen\">\n              <Screen />\n            </Route>\n            <Route path=\"/\">\n              <Full />\n            </Route>\n          </Switch>\n        </Router>\n      </Body>\n    </div>\n  );\n}\n\nexport default App;\n\nconst Body = styled.div`\n  min-height: 100vh;\n  max-height: 100vh;\n  min-width: 100vw;\n  max-width: 100vw;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  background-color: #675ea7;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}